//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"

	"gopkg.in/yaml.v2"
)

type blueprint struct {
	Name               string `yaml:"name"`
	InformalLattice    string `yaml:"informal-lattice"`
	Description        string `yaml:"description"`
	DescriptionLattice string `yaml:"description-lattice"`
	Informal           string `yaml:"informal"`
	Implementation     string `yaml:"implementation"`
	InformalKey        string `yaml:"informal-key"`
	InformalValue      string `yaml:"informal-value"`
	Key                string `yaml:"key"`
	Value              string `yaml:"value"`
}

func formatComment(str string) string {
	return strings.Join(strings.Split(strings.TrimSpace(str), "\n"), "\n// ")
}

// Blueprint for dynamically generating map lattice implementations.
func main() {
	startfilename := strings.TrimSuffix(os.Getenv("GOFILE"), ".go")

	mapYaml, err := os.ReadFile(filepath.Join(filepath.Dir(startfilename), os.Args[1]+".yaml"))
	if err != nil {
		log.Fatal(err)
	}

	var mp blueprint
	if err = yaml.Unmarshal(mapYaml, &mp); err != nil {
		log.Fatal(err)
	}

	mp.Description = formatComment(mp.Description)
	mp.DescriptionLattice = formatComment(mp.DescriptionLattice)

	// templateSrc is the source of the Go template file from which to generate the map lattice implementation.
	templateSrc := "map-wrapper-template.go"
	if mp.Implementation != "" {
		templateSrc = "map-" + mp.Implementation + "-wrapper-template.go"
	}

	templateB, err := os.ReadFile(templateSrc)
	if err != nil {
		log.Fatal(err)
	}

	template := string(templateB)

	// Discard the first two lines
	template = strings.SplitN(template, "\n", 3)[2]

	for _, repl := range []struct{ src, dest string }{
		{`WrappedDescriptionMapLattice`, mp.DescriptionLattice},
		{`InformalMapLattice`, mp.InformalLattice},

		// Replace WrappedMapElement with mapName in the map wrapper file.
		{`WrappedMapElement`, mp.Name},
		{`WrappedDescriptionMapElement`, mp.Description},
		{`InformalMapElement`, mp.Informal},

		// Replace KEYTYPE with keyType in the map wrapper file.
		{`KEYTYPE`, mp.Key},
		{`InformalKeyValue`, mp.InformalKey},
		// Replace VALUETYPE with valueType in the map wrapper file.
		{`VALUETYPE`, mp.Value},
		{`InformalValueValue`, mp.InformalValue},
	} {
		re := regexp.MustCompile(repl.src)
		template = re.ReplaceAllString(template, repl.dest)

	}

	// Attach auto-generated warning to generate file.
	template = fmt.Sprintf("// Code generated by generate-map.go for %s. DO NOT EDIT.\n\n%s", mp.Name, template)

	finalName := startfilename + "_gen.go"
	os.WriteFile(finalName, []byte(template), 0666)

	// Execute goimports, to format generated file and collect all packages that require to be imported.
	err = exec.Command("goimports", "-w", finalName).Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Successfully generated", finalName)
}
